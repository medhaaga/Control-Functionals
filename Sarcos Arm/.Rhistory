mu_AM[i] <- mean(integrands)
mu_ZVCV[i] <- zvcv(integrand = integrands, samples = samples, derivatives = grad)$expectation
samples <- unique(samples)
n_samp <- nrow(samples)
grad <- as.matrix(apply(samples, 1, u, p, mu1, mu2, sd1, sd2), nrow = n_samp, ncol = 1)
integrands <- as.matrix(exp(samples), nrow = n_samp, ncol = 1)
mu_sCF[i] <- CF(integrands = integrands, samples = samples, derivatives = grad, steinOrder = 1, kernel_function = "prodsim", sigma = c(.1,1))$expectation
ind <- sample.int(n_samp, n_samp/2, replace = FALSE)
mu_CF[i] <- CF(integrands = integrands, samples = samples, derivatives = grad, steinOrder = 1, kernel_function = "prodsim", sigma = c(0.1,1), est_inds = ind)$expectation
mu_ZVCV[i] <- zvcv(integrand = integrands, samples = samples, derivatives = grad)$expectation
}
pdf(file = "gaussian_mixture_mix2_exp.pdf", height = 5, width = 5)
boxplot(data.frame("AM" = mu_AM, "ZV-CV" = mu_ZVCV, "simplified CF" = mu_sCF), ylab = expression(mu(f)))
dev.off()
exp(1.5)
p <- 0
mu1 <- 0
mu2 <- 0
sd1 <- 1
sd2 <- 1
for (i in 1:rep){
if(i%%10 == 0) print(i)
samples <- as.matrix(mh.mcmc(start = -3, p, mu1, mu2, sd1, sd2, N+500, 1)[501:(N+500)], nrow = N, ncol = 1)
grad <- as.matrix(apply(samples, 1, u, p, mu1, mu2, sd1, sd2), nrow = n_samp, ncol = 1)
integrands <- as.matrix(exp(samples), nrow = n_samp, ncol = 1)
mu_AM[i] <- mean(integrands)
mu_ZVCV[i] <- zvcv(integrand = integrands, samples = samples, derivatives = grad)$expectation
samples <- unique(samples)
n_samp <- nrow(samples)
grad <- as.matrix(apply(samples, 1, u, p, mu1, mu2, sd1, sd2), nrow = n_samp, ncol = 1)
integrands <- as.matrix(exp(samples), nrow = n_samp, ncol = 1)
mu_sCF[i] <- CF(integrands = integrands, samples = samples, derivatives = grad, steinOrder = 1, kernel_function = "prodsim", sigma = c(.1,1))$expectation
ind <- sample.int(n_samp, n_samp/2, replace = FALSE)
mu_CF[i] <- CF(integrands = integrands, samples = samples, derivatives = grad, steinOrder = 1, kernel_function = "prodsim", sigma = c(0.1,1), est_inds = ind)$expectation
mu_ZVCV[i] <- zvcv(integrand = integrands, samples = samples, derivatives = grad)$expectation
}
pdf(file = "gaussian_mixture_mix0_exp.pdf", height = 5, width = 5)
boxplot(data.frame("AM" = mu_AM, "ZV-CV" = mu_ZVCV, "simplified CF" = mu_sCF), ylab = expression(mu(f)))
dev.off()
truth <- exp(0.5)
truth
mse <- cbind(mu_AM, mu_ZVCV, mu_sCF)
cbind(mu_AM, mu_ZVCV, mu_sCF)
cbind(mu_AM, mu_ZVCV, mu_sCF) - truth
truth
cbind(mu_AM, mu_ZVCV, mu_sCF)
truth
cbind(mu_AM, mu_ZVCV, mu_sCF) - truth
(cbind(mu_AM, mu_ZVCV, mu_sCF) - truth)^2
colMeans((cbind(mu_AM, mu_ZVCV, mu_sCF) - truth)^2)
print(paste(mean(mu_AM), mse[1], mean(mu_ZVCV), mse[2], mean(mu_CF), mse[3]))
mse
mse <- colMeans((cbind(mu_AM, mu_ZVCV, mu_sCF) - truth)^2)
print(paste(mean(mu_AM), mse[1], mean(mu_ZVCV), mse[2], mean(mu_CF), mse[3]))
library(ZVCV)
set.seed(1)
log.density <- function(x, p, mu1, mu2, sd1, sd2){
return(log(p*dnorm(x, mean = mu1, sd = sd1) + (1-p)*dnorm(x, mean = mu2, sd= sd2)))
}
mh.mcmc <- function(start, p, mu1, mu2, sd1, sd2, N, h){
X <- rep(0, N)
X[1] <- start
for (i in 2:N){
prop <- rnorm(1, mean = X[i-1], sd = 2)
ratio <- log.density(prop, p, mu1, mu2, sd1, sd2) - log.density(X[i-1], p, mu1, mu2, sd1, sd2)
if(runif(1) < exp(ratio))
X[i] <- prop else
X[i] <- X[i-1]
}
return (X)
}
iid <- function(start, p, mu1, mu2, sd1, sd2, N, h){
X <- rep(0, N)
for (i in 1:N){
bern <- rbinom(1, size=1, p <- p)
if(bern == 1) X[i] <- rnorm(1, mean = mu1, sd = sd1)
else X[i] <- rnorm(1, mean = mu2, sd = sd2)
}
return (X)
}
u <- function(x, p, mu1, mu2, sd1, sd2){
dens <- exp(log.density(x, p, mu1, mu2, sd1, sd2))
grad <- -((p*(x - mu1)*(1/sd1^2)*dnorm(x, mu1, sd1)) + ((1-p)*(x - mu2)*(1/sd2^2)*dnorm(x, mu2, sd2)))
return(grad/dens)
}
rep <- 100
mu_AM <- rep(0, rep)
mu_CF <- rep(0, rep)
mu_sCF <- rep(0, rep)
mu_ZVCV <- rep(0, rep)
N <- 200
###########################################################
###### Case 1: f(x) = exp(x) p(x) = N(0,1) ################
###########################################################
p <- 0
mu1 <- 0
mu2 <- 0
sd1 <- 1
sd2 <- 1
for (i in 1:rep){
if(i%%10 == 0) print(i)
samples <- as.matrix(mh.mcmc(start = -3, p, mu1, mu2, sd1, sd2, N+500, 1)[501:(N+500)], nrow = N, ncol = 1)
grad <- as.matrix(apply(samples, 1, u, p, mu1, mu2, sd1, sd2), nrow = n_samp, ncol = 1)
integrands <- as.matrix(exp(samples), nrow = n_samp, ncol = 1)
mu_AM[i] <- mean(integrands)
mu_ZVCV[i] <- zvcv(integrand = integrands, samples = samples, derivatives = grad)$expectation
samples <- unique(samples)
n_samp <- nrow(samples)
grad <- as.matrix(apply(samples, 1, u, p, mu1, mu2, sd1, sd2), nrow = n_samp, ncol = 1)
integrands <- as.matrix(exp(samples), nrow = n_samp, ncol = 1)
mu_sCF[i] <- CF(integrands = integrands, samples = samples, derivatives = grad, steinOrder = 1, kernel_function = "prodsim", sigma = c(.1,1))$expectation
ind <- sample.int(n_samp, n_samp/2, replace = FALSE)
mu_CF[i] <- CF(integrands = integrands, samples = samples, derivatives = grad, steinOrder = 1, kernel_function = "prodsim", sigma = c(0.1,1), est_inds = ind)$expectation
mu_ZVCV[i] <- zvcv(integrand = integrands, samples = samples, derivatives = grad)$expectation
}
pdf(file = "gaussian_mixture_mix0_exp.pdf", height = 5, width = 5)
boxplot(data.frame("AM" = mu_AM, "ZV-CV" = mu_ZVCV, "simplified CF" = mu_sCF), ylab = expression(mu(f)))
dev.off()
truth <- exp(0.5)
mse <- colMeans((cbind(mu_AM, mu_ZVCV, mu_sCF) - truth)^2)
print(paste(mean(mu_AM), mse[1], mean(mu_ZVCV), mse[2], mean(mu_CF), mse[3]))
mse <- round(colMeans((cbind(mu_AM, mu_ZVCV, mu_sCF) - truth)^2),4)
mse
print(paste(round(mean(mu_AM),4), mse[1], round(mean(mu_ZVCV), 4), mse[2], round(mean(mu_CF), 4), mse[3]))
p <- 0.5
mu1 <- -1
mu2 <- 1
sd1 <- 1
sd2 <- 1
for (i in 1:rep){
if(i%%10 == 0) print(i)
samples <- as.matrix(mh.mcmc(start = -3, p, mu1, mu2, sd1, sd2, N+500, 1)[501:(N+500)], nrow = N, ncol = 1)
grad <- as.matrix(apply(samples, 1, u, p, mu1, mu2, sd1, sd2), nrow = n_samp, ncol = 1)
integrands <- as.matrix((samples^2), nrow = n_samp, ncol = 1)
mu_AM[i] <- mean(integrands)
mu_ZVCV[i] <- zvcv(integrand = integrands, samples = samples, derivatives = grad)$expectation
samples <- unique(samples)
n_samp <- nrow(samples)
grad <- as.matrix(apply(samples, 1, u, p, mu1, mu2, sd1, sd2), nrow = n_samp, ncol = 1)
integrands <- as.matrix((samples^2), nrow = n_samp, ncol = 1)
mu_sCF[i] <- CF(integrands = integrands, samples = samples, derivatives = grad, steinOrder = 1, kernel_function = "prodsim", sigma = c(.1,1))$expectation
ind <- sample.int(n_samp, n_samp/2, replace = FALSE)
mu_CF[i] <- CF(integrands = integrands, samples = samples, derivatives = grad, steinOrder = 1, kernel_function = "prodsim", sigma = c(0.1,1), est_inds = ind)$expectation
mu_ZVCV[i] <- zvcv(integrand = integrands, samples = samples, derivatives = grad)$expectation
}
pdf(file = "gaussian_mixture_mix1_poly.pdf", height = 5, width = 5)
boxplot(data.frame("AM" = mu_AM, "ZV-CV" = mu_ZVCV, "simplified CF" = mu_sCF), ylab = expression(mu(f)))
dev.off()
mse <- colMeans((cbind(mu_AM, mu_ZVCV, mu_sCF) - truth)^2)
print(paste(mean(mu_AM), mse[1], mean(mu_ZVCV), mse[2], mean(mu_CF), mse[3]))
boxplot(data.frame("AM" = mu_AM, "ZV-CV" = mu_ZVCV, "simplified CF" = mu_sCF), ylab = expression(mu(f)))
truth <- 2
mse <- round(colMeans((cbind(mu_AM, mu_ZVCV, mu_sCF) - truth)^2),4)
print(paste(round(mean(mu_AM),4), mse[1], round(mean(mu_ZVCV), 4), mse[2], round(mean(mu_CF), 4), mse[3]))
p <- 0.5
mu1 <- -2
mu2 <- 2
sd1 <- 1
sd2 <- 1
for (i in 1:rep){
if(i%%10 == 0) print(i)
samples <- as.matrix(mh.mcmc(start = -3, p, mu1, mu2, sd1, sd2, N+500, 1)[501:(N+500)], nrow = N, ncol = 1)
grad <- as.matrix(apply(samples, 1, u, p, mu1, mu2, sd1, sd2), nrow = n_samp, ncol = 1)
integrands <- as.matrix((samples^2), nrow = n_samp, ncol = 1)
mu_AM[i] <- mean(integrands)
mu_ZVCV[i] <- zvcv(integrand = integrands, samples = samples, derivatives = grad)$expectation
samples <- unique(samples)
n_samp <- nrow(samples)
grad <- as.matrix(apply(samples, 1, u, p, mu1, mu2, sd1, sd2), nrow = n_samp, ncol = 1)
integrands <- as.matrix((samples^2), nrow = n_samp, ncol = 1)
mu_sCF[i] <- CF(integrands = integrands, samples = samples, derivatives = grad, steinOrder = 1, kernel_function = "prodsim", sigma = c(.1,1))$expectation
ind <- sample.int(n_samp, n_samp/2, replace = FALSE)
mu_CF[i] <- CF(integrands = integrands, samples = samples, derivatives = grad, steinOrder = 1, kernel_function = "prodsim", sigma = c(0.1,1), est_inds = ind)$expectation
mu_ZVCV[i] <- zvcv(integrand = integrands, samples = samples, derivatives = grad)$expectation
}
print()
pdf(file = "gaussian_mixture_mix2_poly.pdf", height = 5, width = 5)
boxplot(data.frame("AM" = mu_AM, "ZV-CV" = mu_ZVCV, "simplified CF" = mu_sCF), ylab = expression(mu(f)))
dev.off()
mse <- colMeans((cbind(mu_AM, mu_ZVCV, mu_sCF) - truth)^2)
print(paste(mean(mu_AM), mse[1], mean(mu_ZVCV), mse[2], mean(mu_CF), mse[3]))
boxplot(data.frame("AM" = mu_AM, "ZV-CV" = mu_ZVCV, "simplified CF" = mu_sCF), ylab = expression(mu(f)))
truth <- 5
mse <- round(colMeans((cbind(mu_AM, mu_ZVCV, mu_sCF) - truth)^2),4)
print(paste(round(mean(mu_AM),4), mse[1], round(mean(mu_ZVCV), 4), mse[2], round(mean(mu_CF), 4), mse[3]))
p <- 0.5
mu1 <- -2
mu2 <- 2
sd1 <- 1
sd2 <- 1
for (i in 1:rep){
if(i%%10 == 0) print(i)
samples <- as.matrix(mh.mcmc(start = -3, p, mu1, mu2, sd1, sd2, N+500, 1)[501:(N+500)], nrow = N, ncol = 1)
grad <- as.matrix(apply(samples, 1, u, p, mu1, mu2, sd1, sd2), nrow = n_samp, ncol = 1)
integrands <- as.matrix(exp(samples), nrow = n_samp, ncol = 1)
mu_AM[i] <- mean(integrands)
mu_ZVCV[i] <- zvcv(integrand = integrands, samples = samples, derivatives = grad)$expectation
samples <- unique(samples)
n_samp <- nrow(samples)
grad <- as.matrix(apply(samples, 1, u, p, mu1, mu2, sd1, sd2), nrow = n_samp, ncol = 1)
integrands <- as.matrix(exp(samples), nrow = n_samp, ncol = 1)
mu_sCF[i] <- CF(integrands = integrands, samples = samples, derivatives = grad, steinOrder = 1, kernel_function = "prodsim", sigma = c(.1,1))$expectation
ind <- sample.int(n_samp, n_samp/2, replace = FALSE)
mu_CF[i] <- CF(integrands = integrands, samples = samples, derivatives = grad, steinOrder = 1, kernel_function = "prodsim", sigma = c(0.1,1), est_inds = ind)$expectation
mu_ZVCV[i] <- zvcv(integrand = integrands, samples = samples, derivatives = grad)$expectation
}
pdf(file = "gaussian_mixture_mix2_exp.pdf", height = 5, width = 5)
boxplot(data.frame("AM" = mu_AM, "ZV-CV" = mu_ZVCV, "simplified CF" = mu_sCF), ylab = expression(mu(f)))
dev.off()
mse <- colMeans((cbind(mu_AM, mu_ZVCV, mu_sCF) - truth)^2)
print(paste(mean(mu_AM), mse[1], mean(mu_ZVCV), mse[2], mean(mu_CF), mse[3]))
exp(-1.5) + exp(2.5)
(exp(-1.5) + exp(2.5))/2
boxplot(data.frame("AM" = mu_AM, "ZV-CV" = mu_ZVCV, "simplified CF" = mu_sCF), ylab = expression(mu(f)))
truth <- (exp(-1.5) + exp(2.5))/2
mse <- round(colMeans((cbind(mu_AM, mu_ZVCV, mu_sCF) - truth)^2),4)
print(paste(round(mean(mu_AM),4), mse[1], round(mean(mu_ZVCV), 4), mse[2], round(mean(mu_CF), 4), mse[3]))
samples <- matrix(rcauchy(N), nrow = N, ncol = 1)
samples
plot(density(samples))
?rcauchy
hist(rcauchy(N))
plot(density(rcauchy(N)))
plot(density(rcauchy(N, location = 0, scale = 2)))
plot(density(rcauchy(N, location = 0, scale = 5)))
plot(density(rcauchy(N, location = 0, scale = .1)))
plot(density(rcauchy(500, location = 0, scale = 0.1)))
lines(density(rnorm(500)))
plot(density(rcauchy(500, location = 0, scale = 0.001)))
plot(density(rcauchy(500, location = 0, scale = 0.1)))
plot(density(rcauchy(500, location = 0, scale = 1)))
lines(density(rnorm(500)))
samples <- matrix(rcauchy(N), nrow = N, ncol = 1)
grad <- as.matrix(apply(samples, 1, u, p, mu1, mu2, sd1, sd2), nrow = n_samp, ncol = 1)
integrands <- as.matrix(exp(samples), nrow = n_samp, ncol = 1)
weights <- dnorm(samples)/dcauchy(samples)
plot(weights)
plot(density(weights))
samples <- matrix(rcauchy(N), nrow = N, ncol = 1)
grad <- as.matrix(apply(samples, 1, u, p, mu1, mu2, sd1, sd2), nrow = n_samp, ncol = 1)
integrands <- as.matrix(exp(samples), nrow = n_samp, ncol = 1)
weights <- dnorm(samples)/dcauchy(samples)
plot(density(weights))
mean(weights*integrands)
truth <- exp(0.5)
truth
samples <- matrix(rcauchy(N), nrow = N, ncol = 1)
grad <- as.matrix(apply(samples, 1, u, p, mu1, mu2, sd1, sd2), nrow = n_samp, ncol = 1)
integrands <- as.matrix(exp(samples), nrow = n_samp, ncol = 1)
weights <- dnorm(samples)/dcauchy(samples)
mean(weights*integrands)
?CF
set.seed(1)
log.density <- function(x, p, mu1, mu2, sd1, sd2){
return(log(p*dnorm(x, mean = mu1, sd = sd1) + (1-p)*dnorm(x, mean = mu2, sd= sd2)))
}
mh.mcmc <- function(start, p, mu1, mu2, sd1, sd2, N, h){
X <- rep(0, N)
X[1] <- start
for (i in 2:N){
prop <- rnorm(1, mean = X[i-1], sd = 2)
ratio <- log.density(prop, p, mu1, mu2, sd1, sd2) - log.density(X[i-1], p, mu1, mu2, sd1, sd2)
if(runif(1) < exp(ratio))
X[i] <- prop else
X[i] <- X[i-1]
}
return (X)
}
u <- function(x, p, mu1, mu2, sd1, sd2){
dens <- exp(log.density(x, p, mu1, mu2, sd1, sd2))
grad <- -((p*(x - mu1)*(1/sd1^2)*dnorm(x, mu1, sd1)) + ((1-p)*(x - mu2)*(1/sd2^2)*dnorm(x, mu2, sd2)))
return(grad/dens)
}
rep <- 100
mu_AM <- rep(0, rep)
mu_CF <- rep(0, rep)
mu_sCF <- rep(0, rep)
mu_ZVCV <- rep(0, rep)
N <- 200
p <- 0
mu1 <- 0
mu2 <- 0
sd1 <- 1
sd2 <- 1
for (i in 1:rep){
if(i%%10 == 0) print(i)
samples <- matrix(rcauchy(N), nrow = N, ncol = 1)
grad <- as.matrix(apply(samples, 1, u, p, mu1, mu2, sd1, sd2), nrow = n_samp, ncol = 1)
integrands <- as.matrix(exp(samples), nrow = n_samp, ncol = 1)
weights <- dnorm(samples)/dcauchy(samples)
mu_AM[i] <- mean(integrands)
mu_sCF[i] <- CF(integrands = integrands, samples = samples, derivatives = grad, steinOrder = 1, kernel_function = "prodsim", sigma = c(.1,1))$expectation
ind <- sample.int(N, N/2, replace = FALSE)
cf <- CF(integrands = integrands, samples = samples, derivatives = grad, steinOrder = 1, kernel_function = "prodsim", sigma = c(0.1,1), est_inds = ind)
mu_ICF[i] <- mean(weights[-ind]*cf$f_hat)
}
i=1
samples <- matrix(rcauchy(N), nrow = N, ncol = 1)
grad <- as.matrix(apply(samples, 1, u, p, mu1, mu2, sd1, sd2), nrow = n_samp, ncol = 1)
integrands <- as.matrix(exp(samples), nrow = n_samp, ncol = 1)
weights <- dnorm(samples)/dcauchy(samples)
mu_AM[i] <- mean(integrands)
mu_sCF[i] <- CF(integrands = integrands, samples = samples, derivatives = grad, steinOrder = 1, kernel_function = "prodsim", sigma = c(.1,1))$expectation
grad
plot(density(rcauchy(N)))
plot(density(rcauchy(N, scale = 4)))
samples <- matrix(rnorm(N, mean = 1, sd = 1), nrow = N, ncol = 1)
grad <- as.matrix(apply(samples, 1, u, p, mu1, mu2, sd1, sd2), nrow = n_samp, ncol = 1)
integrands <- as.matrix(exp(samples), nrow = n_samp, ncol = 1)
weights <- dnorm(samples)/dcauchy(samples)
mu_AM[i] <- mean(integrands)
mu_sCF[i] <- CF(integrands = integrands, samples = samples, derivatives = grad, steinOrder = 1, kernel_function = "prodsim", sigma = c(.1,1))$expectation
ind <- sample.int(N, N/2, replace = FALSE)
cf <- CF(integrands = integrands, samples = samples, derivatives = grad, steinOrder = 1, kernel_function = "prodsim", sigma = c(0.1,1), est_inds = ind)
mu_ICF[i] <- mean(weights[-ind]*cf$f_hat)
rep <- 100
mu_AM <- rep(0, rep)
mu_ICF <- rep(0, rep)
mu_sCF <- rep(0, rep)
N <- 200
p <- 0
mu1 <- 0
mu2 <- 0
sd1 <- 1
sd2 <- 1
for (i in 1:rep){
if(i%%10 == 0) print(i)
samples <- matrix(rnorm(N, mean = 1, sd = 1), nrow = N, ncol = 1)
grad <- as.matrix(apply(samples, 1, u, p, mu1, mu2, sd1, sd2), nrow = n_samp, ncol = 1)
integrands <- as.matrix(exp(samples), nrow = n_samp, ncol = 1)
weights <- dnorm(samples)/dcauchy(samples)
mu_AM[i] <- mean(integrands)
mu_sCF[i] <- CF(integrands = integrands, samples = samples, derivatives = grad, steinOrder = 1, kernel_function = "prodsim", sigma = c(.1,1))$expectation
ind <- sample.int(N, N/2, replace = FALSE)
cf <- CF(integrands = integrands, samples = samples, derivatives = grad, steinOrder = 1, kernel_function = "prodsim", sigma = c(0.1,1), est_inds = ind)
mu_ICF[i] <- mean(weights[-ind]*cf$f_hat)
}
boxplot(data.frame("AM" = mu_AM, "simplified CF" = mu_sCF, "ICF" = mu_ICF),  ylab = expression(mu(f)))
for (i in 1:rep){
if(i%%10 == 0) print(i)
samples <- matrix(rnorm(N, mean = 1, sd = 1), nrow = N, ncol = 1)
grad <- as.matrix(apply(samples, 1, u, p, mu1, mu2, sd1, sd2), nrow = n_samp, ncol = 1)
integrands <- as.matrix(exp(samples), nrow = n_samp, ncol = 1)
weights <- dnorm(samples)/dcauchy(samples)
mu_AM[i] <- mean(weights*integrands)
mu_sCF[i] <- CF(integrands = integrands, samples = samples, derivatives = grad, steinOrder = 1, kernel_function = "prodsim", sigma = c(.1,1))$expectation
ind <- sample.int(N, N/2, replace = FALSE)
cf <- CF(integrands = integrands, samples = samples, derivatives = grad, steinOrder = 1, kernel_function = "prodsim", sigma = c(0.1,1), est_inds = ind)
mu_ICF[i] <- mean(weights[-ind]*cf$f_hat)
}
for (i in 1:rep){
if(i%%10 == 0) print(i)
samples <- matrix(rnorm(N, mean = 1, sd = 1), nrow = N, ncol = 1)
grad <- as.matrix(apply(samples, 1, u, p, mu1, mu2, sd1, sd2), nrow = n_samp, ncol = 1)
integrands <- as.matrix(exp(samples), nrow = n_samp, ncol = 1)
weights <- dnorm(samples)/dnorm(samples, mean = 1, sd = 1)
mu_AM[i] <- mean(weights*integrands)
mu_sCF[i] <- CF(integrands = integrands, samples = samples, derivatives = grad, steinOrder = 1, kernel_function = "prodsim", sigma = c(.1,1))$expectation
ind <- sample.int(N, N/2, replace = FALSE)
cf <- CF(integrands = integrands, samples = samples, derivatives = grad, steinOrder = 1, kernel_function = "prodsim", sigma = c(0.1,1), est_inds = ind)
mu_ICF[i] <- mean(weights[-ind]*cf$f_hat)
}
boxplot(data.frame("AM" = mu_AM, "simplified CF" = mu_sCF, "ICF" = mu_ICF),  ylab = expression(mu(f)))
p <- 0.5
mu1 <- 1
mu2 <- -1
sd1 <- 1
sd2 <- 1
for (i in 1:rep){
if(i%%10 == 0) print(i)
samples <- matrix(rnorm(N, mean = 0, sd = 1), nrow = N, ncol = 1)
grad <- as.matrix(apply(samples, 1, u, p, mu1, mu2, sd1, sd2), nrow = n_samp, ncol = 1)
integrands <- as.matrix(exp(samples), nrow = n_samp, ncol = 1)
weights <- dnorm(samples)/dnorm(samples, mean = 0, sd = 1)
mu_AM[i] <- mean(weights*integrands)
mu_sCF[i] <- CF(integrands = integrands, samples = samples, derivatives = grad, steinOrder = 1, kernel_function = "prodsim", sigma = c(.1,1))$expectation
ind <- sample.int(N, N/2, replace = FALSE)
cf <- CF(integrands = integrands, samples = samples, derivatives = grad, steinOrder = 1, kernel_function = "prodsim", sigma = c(0.1,1), est_inds = ind)
mu_ICF[i] <- mean(weights[-ind]*cf$f_hat)
}
boxplot(data.frame("AM" = mu_AM, "simplified CF" = mu_sCF, "ICF" = mu_ICF),  ylab = expression(mu(f)))
p <- 0.5
mu1 <- 1
mu2 <- -1
sd1 <- 1
sd2 <- 1
for (i in 1:rep){
if(i%%10 == 0) print(i)
samples <- matrix(rnorm(N, mean = 0, sd = 1), nrow = N, ncol = 1)
grad <- as.matrix(apply(samples, 1, u, p, mu1, mu2, sd1, sd2), nrow = n_samp, ncol = 1)
integrands <- as.matrix(exp(samples), nrow = n_samp, ncol = 1)
weights <- dnorm(samples)/dnorm(samples, mean = 0, sd = 1)
mu_AM[i] <- mean(weights*integrands)
mu_sCF[i] <- CF(integrands = integrands, samples = samples, derivatives = grad, steinOrder = 1, kernel_function = "prodsim", sigma = c(.1,1))$expectation
ind <- sample.int(N, N/3, replace = FALSE)
cf <- CF(integrands = integrands, samples = samples, derivatives = grad, steinOrder = 1, kernel_function = "prodsim", sigma = c(0.1,1), est_inds = ind)
mu_ICF[i] <- mean(weights[-ind]*cf$f_hat)
}
boxplot(data.frame("AM" = mu_AM, "simplified CF" = mu_sCF, "ICF" = mu_ICF),  ylab = expression(mu(f)))
p <- 0.5
mu1 <- 1
mu2 <- -1
sd1 <- 1
sd2 <- 1
for (i in 1:rep){
if(i%%10 == 0) print(i)
samples <- matrix(rnorm(N, mean = 0, sd = 1), nrow = N, ncol = 1)
grad <- as.matrix(apply(samples, 1, u, p, mu1, mu2, sd1, sd2), nrow = n_samp, ncol = 1)
integrands <- as.matrix(exp(samples), nrow = n_samp, ncol = 1)
weights <- dnorm(samples)/dnorm(samples, mean = 0, sd = 1)
mu_AM[i] <- mean(weights*integrands)
mu_sCF[i] <- CF(integrands = integrands, samples = samples, derivatives = grad, steinOrder = 1, kernel_function = "prodsim", sigma = c(.1,1))$expectation
ind <- sample.int(N, N/1.5, replace = FALSE)
cf <- CF(integrands = integrands, samples = samples, derivatives = grad, steinOrder = 1, kernel_function = "prodsim", sigma = c(0.1,1), est_inds = ind)
mu_ICF[i] <- mean(weights[-ind]*cf$f_hat)
}
boxplot(data.frame("AM" = mu_AM, "simplified CF" = mu_sCF, "ICF" = mu_ICF),  ylab = expression(mu(f)))
p <- 0.5
mu1 <- 1
mu2 <- -1
sd1 <- 1
sd2 <- 1
for (i in 1:rep){
if(i%%10 == 0) print(i)
samples <- matrix(rnorm(N, mean = 0, sd = 2), nrow = N, ncol = 1)
grad <- as.matrix(apply(samples, 1, u, p, mu1, mu2, sd1, sd2), nrow = n_samp, ncol = 1)
integrands <- as.matrix(exp(samples), nrow = n_samp, ncol = 1)
weights <- dnorm(samples)/dnorm(samples, mean = 0, sd = 2)
mu_AM[i] <- mean(weights*integrands)
mu_sCF[i] <- CF(integrands = integrands, samples = samples, derivatives = grad, steinOrder = 1, kernel_function = "prodsim", sigma = c(.1,1))$expectation
ind <- sample.int(N, N/1.5, replace = FALSE)
cf <- CF(integrands = integrands, samples = samples, derivatives = grad, steinOrder = 1, kernel_function = "prodsim", sigma = c(0.1,1), est_inds = ind)
mu_ICF[i] <- mean(weights[-ind]*cf$f_hat)
}
boxplot(data.frame("AM" = mu_AM, "simplified CF" = mu_sCF, "ICF" = mu_ICF),  ylab = expression(mu(f)))
plot(density(samples))
p <- 0.5
mu1 <- 2
mu2 <- -2
sd1 <- 1
sd2 <- 1
for (i in 1:rep){
if(i%%10 == 0) print(i)
samples <- matrix(rnorm(N, mean = 0, sd = 2), nrow = N, ncol = 1)
grad <- as.matrix(apply(samples, 1, u, p, mu1, mu2, sd1, sd2), nrow = n_samp, ncol = 1)
integrands <- as.matrix(exp(samples), nrow = n_samp, ncol = 1)
weights <- dnorm(samples)/dnorm(samples, mean = 0, sd = 2)
mu_AM[i] <- mean(weights*integrands)
mu_sCF[i] <- CF(integrands = integrands, samples = samples, derivatives = grad, steinOrder = 1, kernel_function = "prodsim", sigma = c(.1,1))$expectation
ind <- sample.int(N, N/1.5, replace = FALSE)
cf <- CF(integrands = integrands, samples = samples, derivatives = grad, steinOrder = 1, kernel_function = "prodsim", sigma = c(0.1,1), est_inds = ind)
mu_ICF[i] <- mean(weights[-ind]*cf$f_hat)
}
boxplot(data.frame("AM" = mu_AM, "simplified CF" = mu_sCF, "ICF" = mu_ICF),  ylab = expression(mu(f)))
boxplot(data.frame("AM" = mu_AM, "ICF" = mu_ICF),  ylab = expression(mu(f)))
for (i in 1:rep){
if(i%%10 == 0) print(i)
samples <- matrix(rnorm(N, mean = 0, sd = 2), nrow = N, ncol = 1)
grad <- as.matrix(apply(samples, 1, u, p, mu1, mu2, sd1, sd2), nrow = n_samp, ncol = 1)
integrands <- as.matrix(exp(samples), nrow = n_samp, ncol = 1)
weights <- dnorm(samples)/dnorm(samples, mean = 0, sd = 2)
mu_AM[i] <- mean(weights*integrands)
mu_sCF[i] <- CF(integrands = integrands, samples = samples, derivatives = grad, steinOrder = 1, kernel_function = "prodsim", sigma = c(.1,1))$expectation
ind <- sample.int(N, N/2, replace = FALSE)
cf <- CF(integrands = integrands, samples = samples, derivatives = grad, steinOrder = 1, kernel_function = "prodsim", sigma = c(0.1,1), est_inds = ind)
mu_ICF[i] <- mean(weights[-ind]*cf$f_hat)
}
boxplot(data.frame("AM" = mu_AM, "ICF" = mu_ICF),  ylab = expression(mu(f)))
truth <- exp(0.5)
mse <- round(colMeans((cbind(mu_AM, mu_ICF) - truth)^2),4)
load(file = "objects/means_n100.Rdata")
Ntest <- dim(mu_bar)[1]
setwd("~/Documents/GitHub/Control-Functionals/Sarcos Arm")
load(file = "objects/means_n100.Rdata")
Ntest <- dim(mu_bar)[1]
sd_AM <- matrix(0, nrow = Ntest, ncol = 5)
sd_ZV <- matrix(0, nrow = Ntest, ncol = 5)
sd_CF <- matrix(0, nrow = Ntest, ncol = 5)
sd_CF_simp <- matrix(0, nrow = Ntest, ncol = 5)
for (i in 1:3){
sd_AM[,i] <- apply(mu_bar[,,i], MARGIN = 1, FUN = sd)
sd_ZV[,i] <- apply(mu_ZV[,,i], MARGIN = 1, FUN = sd)
sd_CF[,i] <- apply(mu_CF[,,i], MARGIN = 1, FUN = sd)
sd_CF_simp[,i] <- apply(mu_CF_simp[,,i], MARGIN = 1, FUN = sd)
}
load(file = "objects/means_n200.Rdata")
for (i in 1:2){
sd_AM[,i+3] <- apply(mu_bar[,,i], MARGIN = 1, FUN = sd)
sd_ZV[,i+3] <- apply(mu_ZV[,,i], MARGIN = 1, FUN = sd)
sd_CF[,i+3] <- apply(mu_CF[,,i], MARGIN = 1, FUN = sd)
sd_CF_simp[,i+3] <- apply(mu_CF_simp[,,i], MARGIN = 1, FUN = sd)
}
par(mfrow = c(1,3))
plot(sd_CF[,1], sd_AM[,1], xlim = c(0, 0.12), ylim = c(0, 0.12), xlab = "Std[Control functionals]", ylab = "Std[Arithmetic means]", main = "n = 50", cex.lab = 2, cex.main = 2, cex.axis  = 2)
plot(sd_CF[,3], sd_AM[,3], xlim = c(0, 0.12), ylim = c(0, 0.12), xlab = "Std[Control functionals]", ylab = "Std[Arithmetic means]", main = "n = 75", cex.lab = 2, cex.main = 2, cex.axis  = 2)
plot(sd_CF[,5], sd_AM[,5], xlim = c(0, 0.12), ylim = c(0, 0.12), xlab = "Std[Control functionals]", ylab = "Std[Arithmetic means]", main = "n = 100", cex.lab = 2, cex.main = 2, cex.axis  = 2)
par(mfrow = c(1,3), mar=c(5,6,4,1)+.1)
plot(sd_CF[,1], sd_AM[,1], xlim = c(0, 0.12), ylim = c(0, 0.12), xlab = "Std[Control functionals]", ylab = "Std[Arithmetic means]", main = "n = 50", cex.lab = 2, cex.main = 2, cex.axis  = 2)
plot(sd_CF[,3], sd_AM[,3], xlim = c(0, 0.12), ylim = c(0, 0.12), xlab = "Std[Control functionals]", ylab = "Std[Arithmetic means]", main = "n = 75", cex.lab = 2, cex.main = 2, cex.axis  = 2)
plot(sd_CF[,5], sd_AM[,5], xlim = c(0, 0.12), ylim = c(0, 0.12), xlab = "Std[Control functionals]", ylab = "Std[Arithmetic means]", main = "n = 100", cex.lab = 2, cex.main = 2, cex.axis  = 2)
pdf(file = "objects/AMvsCF.pdf", width = 15, height = 5)
par(mfrow = c(1,3), mar=c(5,6,4,1)+.1)
plot(sd_CF[,1], sd_AM[,1], xlim = c(0, 0.12), ylim = c(0, 0.12), xlab = "Std[Control functionals]", ylab = "Std[Arithmetic means]", main = "n = 50", cex.lab = 2, cex.main = 2, cex.axis  = 2)
plot(sd_CF[,3], sd_AM[,3], xlim = c(0, 0.12), ylim = c(0, 0.12), xlab = "Std[Control functionals]", ylab = "Std[Arithmetic means]", main = "n = 75", cex.lab = 2, cex.main = 2, cex.axis  = 2)
plot(sd_CF[,5], sd_AM[,5], xlim = c(0, 0.12), ylim = c(0, 0.12), xlab = "Std[Control functionals]", ylab = "Std[Arithmetic means]", main = "n = 100", cex.lab = 2, cex.main = 2, cex.axis  = 2)
dev.off()
pdf(file = "objects/CVvsCF.pdf", width = 15, height = 5)
par(mfrow = c(1,3), mar=c(5,6,4,1)+.1)
plot(sd_CF_simp[,1], sd_ZV[,1], xlim = c(0, 0.03), ylim = c(0, 0.03), xlab = "Std[Control functionals]", ylab = "Std[Control Variates]", main = "n = 50", cex.lab = 2, cex.main = 2, cex.axis  = 2)
plot(sd_CF_simp[,3], sd_ZV[,3], xlim = c(0, 0.03), ylim = c(0, 0.03), xlab = "Std[Control functionals]", ylab = "Std[Control Variates]", main = "n = 75", cex.lab = 2, cex.main = 2, cex.axis  = 2)
plot(sd_CF_simp[,5], sd_ZV[,5], xlim = c(0, 0.03), ylim = c(0, 0.03), xlab = "Std[Control functionals]", ylab = "Std[Control Variates]", main = "n = 100", cex.lab = 2, cex.main = 2, cex.axis  = 2)
dev.off()
